apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

apply from: "${rootProject.getRootDir()}/tools/git/script-git-version.gradle"

android {

    playAccountConfigs {

        defaultAccountConfig {

            serviceAccountEmail = System.getenv("SERVICE_ACCOUNT_EMAIL")
            jsonFile = file('play.json')
        }
    }

    defaultConfig {

        applicationId "com.orogersilva.superpub.dublin"

        multiDexEnabled true

        manifestPlaceholders = [
                fabric_api_key: System.getenv("FABRIC_API_KEY"),
                facebook_app_id: System.getenv("FACEBOOK_ID")
        ]

        playAccountConfig = playAccountConfigs.defaultAccountConfig

        testInstrumentationRunner "com.orogersilva.superpub.dublin.CustomInstrumentationTestRunner"
    }

    signingConfigs {

        debug {

            storeFile rootProject.file('keystore/debug.jks')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {

            storeFile rootProject.file('keystore/release.jks')
            storePassword System.getenv("STORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    flavorDimensions "environment"

    productFlavors {

        dev {

            dimension "environment"

            minSdkVersion 21

            versionCode gitVersionCodeTime
            versionName gitVersionName

            applicationIdSuffix ".dev"
        }

        prod {

            dimension "environment"

            versionCode gitVersionCode
            versionName gitVersionName
        }
    }

    buildTypes {

        debug {

            buildConfigField "String", "FACEBOOK_GRAPH_API",
                "\"https://graph.facebook.com/\""

            manifestPlaceholders = [
                    google_maps_api_key: "AIzaSyDJvGdZBvVoVgwhGregyLAAM6Lwjm_cV7c"
            ]

            ext.enableCrashlytics = false

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    rootProject.file('tools/proguard/rules-proguard-debug.pro')

            testProguardFile rootProject.file('tools/proguard/test-rules-proguard-debug.pro')

            signingConfig signingConfigs.debug
        }

        release {

            buildConfigField "String", "FACEBOOK_GRAPH_API",
                "\"https://graph.facebook.com/\""

            manifestPlaceholders = [
                    google_maps_api_key: System.getenv("GOOGLE_MAPS_API_KEY")
            ]

            minifyEnabled false
            // shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    rootProject.file('tools/proguard/rules-proguard.pro')

            signingConfig signingConfigs.release
        }
    }

    play {

        track = 'alpha'
        untrackOld = true
        uploadImages = true
    }

    splits {

        abi {

            enable true
            reset()
            include 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'
            universalApk false
        }

        density {

            enable false
        }
    }

    dexOptions {

        preDexLibraries true
        maxProcessCount 4       // Default value = 4
        javaMaxHeapSize "4g"
    }

    lintOptions {

        abortOnError false
        checkReleaseBuilds false
    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

// Show test status in console.
tasks.withType(Test) {

    testLogging {
        events "passed", "failed"
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':data')
    implementation project(':device')
    implementation project(':domain')

    def androidLibs = [
            appCompat: [group: 'com.android.support', name: 'appcompat-v7', version: androidSDKVersion],
            cardview: [group: 'com.android.support', name: 'cardview-v7', version: androidSDKVersion],
            constraintLayout: [group: 'com.android.support.constraint', name: 'constraint-layout', version: constraintLayoutVersion],
            design: [group: 'com.android.support', name: 'design', version: androidSDKVersion],
            multidex: [group: 'com.android.support', name: 'multidex', version: multidexVersion],
            recyclerview: [group: 'com.android.support', name: 'recyclerview-v7', version: androidSDKVersion]
    ]

    def libs = [
            avLoadingIndicatorView: [group: 'com.wang.avi', name: 'library', version: avLoadingIndicatorViewVersion],
            circleImageView: [group: 'de.hdodenhof', name: 'circleimageview', version: circleImageViewVersion],
            dagger: [group: 'com.google.dagger', name: 'dagger', version: daggerVersion],
            daggerCompiler: [group: 'com.google.dagger', name: 'dagger-compiler', version: daggerVersion],
            facebookSdk: [group: 'com.facebook.android', name: 'facebook-android-sdk', version: facebookSdkVersion],
            glide: [group: 'com.github.bumptech.glide', name: 'glide', version: glideVersion],
            glideCompiler: [group: 'com.github.bumptech.glide', name: 'compiler', version: glideVersion],
            googlePlayServicesLocation: [group: 'com.google.android.gms', name: 'play-services-location', version: googlePlayServicesVersion],
            googlePlayServicesMaps: [group: 'com.google.android.gms', name: 'play-services-maps', version: googlePlayServicesVersion],
            javaxAnnotation: [group: 'javax.annotation', name: 'jsr250-api', version: javaxAnnotationVersion],
            kotlin: [group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion],
            kotlinReflect: [group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion],
            leakCanary: [group: 'com.squareup.leakcanary', name: 'leakcanary-android', version: leakCanaryVersion],
            paperParcel: [group: 'nz.bradcampbell', name: 'paperparcel', version: paperParcelVersion],
            paperParcelCompiler: [group: 'nz.bradcampbell', name: 'paperparcel-compiler', version: paperParcelVersion],
            paperParcelKotlin: [group: 'nz.bradcampbell', name: 'paperparcel-kotlin', version: paperParcelVersion],
            rippleEffect: [group: 'com.patrickpissurno', name: 'ripple-effect', version: rippleEffectVersion],
            rxAndroid: [group: 'io.reactivex.rxjava2', name: 'rxandroid', version: rxAndroidVersion],
            rxjava2: [group: 'io.reactivex.rxjava2', name: 'rxjava', version: rxjava2Version],
            stetho: [group: 'com.facebook.stetho', name: 'stetho', version: stethoVersion]
    ]

    def testLibs = [
            espresso: [group: 'com.android.support.test.espresso', name: 'espresso-core', version: espressoVersion],
            hamcrest: [group: 'org.hamcrest', name: 'hamcrest-library', version: hamcrestVersion],
            junit: [group: 'junit', name: 'junit', version: junitVersion],
            kotlinUnitTest: [group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlinVersion],
            mockito: [group: 'org.mockito', name: 'mockito-android', version: mockitoVersion],
            mockitoKotlin: [group: 'com.nhaarman', name: 'mockito-kotlin', version: mockitoKotlinVersion],
            runner: [group: 'com.android.support.test', name: 'runner', version: runnerVersion],
            testButler: [group: 'com.linkedin.testbutler', name: 'test-butler-library', version: testButlerVersion],
            uiAutomator: [group: 'com.android.support.test.uiautomator', name: 'uiautomator-v18', version: uiAutomatorVersion]
    ]

    def appDependencies = [
            [configuration: 'implementation', dependency: androidLibs.appCompat],
            [configuration: 'implementation', dependency: androidLibs.cardview],
            [configuration: 'implementation', dependency: androidLibs.constraintLayout],
            [configuration: 'implementation', dependency: androidLibs.design],
            [configuration: 'implementation', dependency: androidLibs.multidex],
            [configuration: 'implementation', dependency: androidLibs.recyclerview],

            [configuration: 'implementation', dependency: libs.avLoadingIndicatorView],
            [configuration: 'implementation', dependency: libs.circleImageView],
            [configuration: 'implementation', dependency: libs.dagger],
            [configuration: 'kapt', dependency: libs.daggerCompiler],
            [configuration: 'implementation', dependency: libs.facebookSdk],
            [configuration: 'implementation', dependency: libs.glide],
            [configuration: 'kapt', dependency: libs.glideCompiler],
            [configuration: 'implementation', dependency: libs.googlePlayServicesLocation],
            [configuration: 'implementation', dependency: libs.googlePlayServicesMaps],
            [configuration: 'compileOnly', dependency: libs.javaxAnnotation],
            [configuration: 'implementation', dependency: libs.kotlin],
            [configuration: 'implementation', dependency: libs.kotlinReflect],
            [configuration: 'implementation', dependency: libs.leakCanary],
            [configuration: 'implementation', dependency: libs.paperParcel],
            [configuration: 'kapt', dependency: libs.paperParcelCompiler],
            [configuration: 'implementation', dependency:  libs.paperParcelKotlin],
            [configuration: 'implementation', dependency: libs.rippleEffect],
            [configuration: 'implementation', dependency: libs.rxAndroid],
            [configuration: 'implementation', dependency: libs.rxjava2],
            [configuration: 'implementation', dependency: libs.stetho],

            [configuration: 'androidTestImplementation', dependency: libs.dagger],
            [configuration: 'kaptAndroidTest', dependency: libs.daggerCompiler],
            [configuration: 'androidTestImplementation', dependency: testLibs.espresso, options: {
                exclude group: 'com.android.support', module: 'support-annotations'
            }],
            [configuration: 'androidTestImplementation', dependency: testLibs.hamcrest],
            [configuration: 'androidTestImplementation', dependency: testLibs.mockito],
            [configuration: 'androidTestImplementation', dependency: testLibs.mockitoKotlin, options: {
                exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
                exclude group: 'org.jetbrains.kotlin', module: 'kotlin-reflect'
            }],
            [configuration: 'androidTestImplementation', dependency: testLibs.runner],
            [configuration: 'androidTestImplementation', dependency: testLibs.testButler],
            [configuration: 'androidTestImplementation', dependency: testLibs.uiAutomator],

            [configuration: 'testImplementation', dependency: testLibs.junit],
            [configuration: 'testImplementation', dependency: testLibs.kotlinUnitTest],
            [configuration: 'testImplementation', dependency: testLibs.mockitoKotlin, options: {
                exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
                exclude group: 'org.jetbrains.kotlin', module: 'kotlin-reflect'
            }]
    ]

    appDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }

    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
}

ext.abiCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 4, 'x86': 5, 'x86_64': 6].withDefault {0}

import com.android.build.OutputFile

android.applicationVariants.all { variant ->

    variant.outputs.each { output ->

        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        if (baseAbiVersionCode != null) {

            output.versionCodeOverride = baseAbiVersionCode * 1000000 + variant.versionCode
        }
    }
}

apply from: "${rootProject.getRootDir()}/android.gradle"